// Code generated by goctl. DO NOT EDIT.
// Source: rpcdemo.proto

package rpcdemoclient

import (
	"context"

	"gozerodemo.com/rpcdemo/rpcdemo"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Request      = rpcdemo.Request
	Response     = rpcdemo.Response
	SayHelloReq  = rpcdemo.SayHelloReq
	SayHelloResp = rpcdemo.SayHelloResp

	Rpcdemo interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		SayHello(ctx context.Context, in *SayHelloReq, opts ...grpc.CallOption) (*SayHelloResp, error)
	}

	defaultRpcdemo struct {
		cli zrpc.Client
	}
)

func NewRpcdemo(cli zrpc.Client) Rpcdemo {
	return &defaultRpcdemo{
		cli: cli,
	}
}

func (m *defaultRpcdemo) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := rpcdemo.NewRpcdemoClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultRpcdemo) SayHello(ctx context.Context, in *SayHelloReq, opts ...grpc.CallOption) (*SayHelloResp, error) {
	client := rpcdemo.NewRpcdemoClient(m.cli.Conn())
	return client.SayHello(ctx, in, opts...)
}
